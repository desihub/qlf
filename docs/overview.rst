Overview
=========

Frontend
---------

ReactJS App connect to the backend via websockets and REST API.

Monitor
^^^^^^^^
Real-time app that controls and presents current system data

Features
~~~~~~~~~

* Start/Stop pipeline execution.
* Information about current exposure being processed.
* Follow evolution of pipeline steps for each camera.
   * Per camera log by clicking on each camera process evolving line.  
* Log highlights pipeline’s checkpoints and run-time.
* QA information for each PA displayed as tooltip when mouse over a petal.
* Monitor new exposures as they are discovered.
* Clear logs and redux files
* Realtime camera log monitoring
* Processing alert box

Processing History
^^^^^^^^^^^^^^^^^^^^^^^^

Lists of all exposures processed by the pipeline.

Features
~~~~~~~~~

* Most Recent lists 10 most recent processes (Updated real time)
* History containing all exposures processed. (Not updated in real time)
   * Can be filtered by status, flavor, exposure start and end date. 
   * Can be ordered by Status, Process Id, Process Date, Exp Id, Tile ID, Obs date, Obs Time, RA, DEC, Exp Time
* QA column ✓ (or ✖︎) for each exposure links to QA screen app.
* View global state of fibers for the 10 petals (only science exposures)
* Comment process
* Logs generated by process (only at KPNO)

Observing History
^^^^^^^^^^^^^^^^^^

Lists of all exposures available (and respective last QA results when processed)  

Features
~~~~~~~~~

* List 10 most recent exposures (updated in real time)
* History containing all exposures. (not updated in real time)
   * They can be filtered by flavor, exposure start and end date.
   * It can be ordered by Exp Id, Tile ID, Obs date, Obs Time, RA, DEC, Exp Time.
* QA column ✓ (or ✖︎) for each exposure links to QA screen app (when process is available).

*TODO:* Inside the history tab is possible to reprocess a selected exposure and add it to the end of the pipeline processing queue by selecting and clicking *Submit*.

Afternoon Planning
^^^^^^^^^^^^^^^^^^^

*TODO:* Shows exposures processed offline at NERSC. 

QA
^^^^

Shows QA tests summary

Features
~~~~~~~~~

* Process ID, Exposure ID, flavor, MJD and Date for the selected exposure
* Each camera petal divided by PA results are represented by colors
   * Grey when there is a QA not found
   * Red alarm in a QA test 
   * Yellow warning in a QA test
   * Green all QA  tests in the step passed
* Drill down by clicking a petal (except when grey) 
   * Metrics are shown by either red or green, respectively failure or success
   * Graphs are shown with a short description
   * All display for each step, spectrograph, and arm selection

Trend Analysis
^^^^^^^^^^^^^^^

Features
~~~~~~~~~

* Metrics Time Series plots for scalar metrics
   * Date range, metric, amplifier and camera selection filters
* Tooltip to explain date period 

Observing Conditions
^^^^^^^^^^^^^^^^^^^^^

Features
~~~~~~~~~

* Time series and regression plots for observing conditions attributes (airmass, sky brightness)
   * Date range, attribute and camera selection filters (Time Series)
   * Date range, attribute X axis, attribute Y axis and camera selection filters (Regression)
* Tooltip to explain date period 

Survey Reports
^^^^^^^^^^^^^^^

Features
~~~~~~~~~

* Observed footprint
   * Date range and program selection filters
* Tooltip to explain date period 

Configuration
^^^^^^^^^^^^^^

Features
~~~~~~~~~

* View QLF configuration
* View QL configuration

Backend
---------

Django and PYRO deamon used to wrap `desispec`_ pipelines, monitor it's execution notifying the frontend and plotting bokeh visualizations.

.. _desispec: https://github.com/desihub/desispec

QLF Pipeline
^^^^^^^^^^^^^^

PYRO Daemon running QL.

Features
~~~~~~~~~

* Runs QL using a configuration
* Ingest QA files to database
* Display QA scalar metrics 

Django API
^^^^^^^^^^^^

Administrative back-end managing Frontend, Pipeline connections and bokeh plots

Features
~~~~~~~~~

* Provides an API
* Connects to QLF Daemon
* Manages Front-end websocket connections and REST services
* Connects to databases (currently using only a local postgres database)
* Generate QA graphs for drill downs
* Generate footprint for Survey Reports
* Generate Time Series and Regression plots